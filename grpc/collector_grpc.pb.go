// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	TrackPayload(ctx context.Context, in *TrackPayloadRequest, opts ...grpc.CallOption) (*TrackPayloadResponse, error)
	StreamTrackPayload(ctx context.Context, opts ...grpc.CallOption) (CollectorService_StreamTrackPayloadClient, error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/tracker.CollectorService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) TrackPayload(ctx context.Context, in *TrackPayloadRequest, opts ...grpc.CallOption) (*TrackPayloadResponse, error) {
	out := new(TrackPayloadResponse)
	err := c.cc.Invoke(ctx, "/tracker.CollectorService/TrackPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) StreamTrackPayload(ctx context.Context, opts ...grpc.CallOption) (CollectorService_StreamTrackPayloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CollectorService_serviceDesc.Streams[0], "/tracker.CollectorService/StreamTrackPayload", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceStreamTrackPayloadClient{stream}
	return x, nil
}

type CollectorService_StreamTrackPayloadClient interface {
	Send(*TrackPayloadRequest) error
	CloseAndRecv() (*TrackPayloadResponse, error)
	grpc.ClientStream
}

type collectorServiceStreamTrackPayloadClient struct {
	grpc.ClientStream
}

func (x *collectorServiceStreamTrackPayloadClient) Send(m *TrackPayloadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorServiceStreamTrackPayloadClient) CloseAndRecv() (*TrackPayloadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TrackPayloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations must embed UnimplementedCollectorServiceServer
// for forward compatibility
type CollectorServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	TrackPayload(context.Context, *TrackPayloadRequest) (*TrackPayloadResponse, error)
	StreamTrackPayload(CollectorService_StreamTrackPayloadServer) error
	mustEmbedUnimplementedCollectorServiceServer()
}

// UnimplementedCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServiceServer struct {
}

func (UnimplementedCollectorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCollectorServiceServer) TrackPayload(context.Context, *TrackPayloadRequest) (*TrackPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackPayload not implemented")
}
func (UnimplementedCollectorServiceServer) StreamTrackPayload(CollectorService_StreamTrackPayloadServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrackPayload not implemented")
}
func (UnimplementedCollectorServiceServer) mustEmbedUnimplementedCollectorServiceServer() {}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.CollectorService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_TrackPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).TrackPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.CollectorService/TrackPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).TrackPayload(ctx, req.(*TrackPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_StreamTrackPayload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).StreamTrackPayload(&collectorServiceStreamTrackPayloadServer{stream})
}

type CollectorService_StreamTrackPayloadServer interface {
	SendAndClose(*TrackPayloadResponse) error
	Recv() (*TrackPayloadRequest, error)
	grpc.ServerStream
}

type collectorServiceStreamTrackPayloadServer struct {
	grpc.ServerStream
}

func (x *collectorServiceStreamTrackPayloadServer) SendAndClose(m *TrackPayloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorServiceStreamTrackPayloadServer) Recv() (*TrackPayloadRequest, error) {
	m := new(TrackPayloadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _CollectorService_HealthCheck_Handler,
		},
		{
			MethodName: "TrackPayload",
			Handler:    _CollectorService_TrackPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTrackPayload",
			Handler:       _CollectorService_StreamTrackPayload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/collector.proto",
}
